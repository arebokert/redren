#!/usr/bin/env python

import sys
import os
import subprocess
from shutil import copy2
from dateutil.parser import parse
import argparse

def main():
   parser = argparse.ArgumentParser()
   parser.add_argument("-i","--input", type=str, help="Input directory to gather files from",
      required=True)
   parser.add_argument("-o","--output", type=str, help="Output directory to put renamed folders in",
      required=True)
   parser.add_argument("-f", "--format", type=str, 
      help="Rip format of input folder(s). If not set, release format will not be set in the folder names. Ex. WEB")
   parser.add_argument("-r", "--recursion", action="store_true",
      help="Recurse through input folder")
   args = parser.parse_args()

   inputfolder = args.input
   outputfolder = args.output
   albumformat = args.format
   recursion = args.recursion

   if not os.path.isdir(inputfolder):
      raise Exception("Input folder does not exist")
   if not os.path.isdir(outputfolder):
      try:
         print("Output folder does not exist, trying to create folder(s)")
         os.makedirs(outputfolder)
         print("Folder(s) created successfully")
      except OSError as exc:
         if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
         else:
            raise

   print("Using input folder: " + inputfolder)
   print("Using output folder: " + outputfolder)
   print("Format of input files is " + albumformat)
   print("Recurse through subfolders in input folder: " + str(recursion).lower())

   scanFolder(inputfolder, outputfolder, albumformat, recursion)

def scanFolder(inputfolder, outputfolder, albumformat, recursion):
   created = False
   year = ""
   quality = ""
   album = ""
   performer = ""
   output = ""
   for filename in os.listdir(inputfolder):
      print("\nProcessing file/dir: " + inputfolder + filename)
      currentfolder = inputfolder + "/" + filename
      if os.path.isdir(currentfolder) and recursion:
         print("Current file is a folder and recursion is activated, diving in...")
         scanFolder(currentfolder, outputfolder, albumformat, True)
      ext = os.path.splitext(filename)[1]
      if ext.lower() in [".mp3",".flac",".aac",".ac3",".dts"]:
         print("Found audio file")
         if created == False:
            process = subprocess.Popen("mediainfo " + ' --Inform="General;%Album%,.,%Performer%,.,%Recorded_Date%,.,%Original/Released_Date%,.,%Released_Date%" ' + '"' + filename + '"', cwd=inputfolder, shell="true", stdout=subprocess.PIPE)
            out, err = process.communicate()
            
            try:
               out = out.decode()
            except AttributeError:
               pass
            params = out.split(",.,")
            if params[0] != "":
               album = params[0]
            else:
               album = "undefined"
            if params[1] != "":
               performer = params[1]
            else:
               performer = "undefined"
            if params[2] != "":
               year = str(parse(params[2], fuzzy=True).year)
            elif params[3] != "":
               year = str(parse(params[3], fuzzy=True).year)
            elif params[4] != "":
               year = str(parse(params[4], fuzzy=True).year)
            else:
               year = "undefined"
             
            if ext.lower() == ".flac":
               quality = "FLAC"
            elif ext.lower() == ".ac3":
               quality = "AC3"
            elif ext.lower() == ".aac":
               quality = "AAC"
            elif ext.lower() == ".mp3":
               process = subprocess.Popen("mediainfo " + ' --Inform="Audio;%BitRate%,.,%BitRate_Mode%,.,%Format_Version%" '+ '"' + filename + '"', cwd=inputfolder, shell="true", stdout=subprocess.PIPE)
               out, err = process.communicate()
               try:
                  out = out.decode()
               except AttributeError:
                  pass
               params = out.split(",.,")
               if params[1] == "CBR":
                  quality = str((int(params[0])/1000))
               elif params[1] == "VBR":
                  params[2] = str(params[2])
                  version = [int(s) for s in params[2].split() if s.isdigit()]
                  version[0] = str(version[0])
                  quality = "V" + version[0]
               else:
                  quality = "undefined"

            if quality != "" and year != "" and performer != "" and album != "":
               print("Got params for directory creation: ")
               print("Performer: " + performer)
               print("Album: " + album)
               print("Year: " + year)
               print("Quality: " + quality)
               output = outputfolder + "/" + performer + " - " + album + " [" + year + "] [" + albumformat + "] [" + quality + "]"
               if not os.path.isdir(output):
                  print("Creating dir: " + output)
                  os.makedirs(output)
               else:
                  print("Dir " + output + " already exists")
               created = True

         process = subprocess.Popen("mediainfo " + ' --Inform="General;%Track/Position% - %Performer% - %Title%.%FileExtension%" ' + '"' + filename + '"', cwd=inputfolder, shell="true", stdout=subprocess.PIPE)
         out, err = process.communicate()
           
         try:
            out = out.decode()
            print("Found invalid chars in metadata. Issue was fixed.")
         except AttributeError:
            pass

         if os.path.isdir(output):
            print("Creating new file: " + out.rstrip())
            copy2(inputfolder + "/" + filename, output)
            os.rename(output + "/" + filename, output + "/" + out.rstrip())

if __name__ == "__main__":
    main()